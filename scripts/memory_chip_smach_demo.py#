#!/usr/bin/env python
import rospy
import os,sys
import numpy as np
import smach
import smach_ros
from std_msgs.msg import String,Bool
from moveit_api_warpper import arm_utils
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import PoseStamped, Pose
from linemod_pose_estimation.srv import linemod_pose, linemod_poseRequest, linemod_poseResponse
from staubli_val3_driver.srv import IOCommand,IOCommandRequest,IOCommandResponse


robot = None
group = None
object_pose = None
insert_position = []

class MoveToReadyPose(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        global robot,group
        ready_position = [1.414566993713379, 0.33568114042282104, 1.8443951606750488, -0.11257880926132202, 1.197943091392517, -2.097616672515869]
        home_plan = arm_utils.fK_calculate(group,home_position)
        arm_utils.execute_plan(group,home_plan)
        arm_utils.gripper_control("open")
        return "succuss"

# class MoveToDetectionPosition(smach.State):
#     def __init__(self):
#         smach.State.__init__(self, outcomes=['succuss'])

#     def execute(self, userdata):
#         global robot,group,object_pose
#         detection_position = [0.5296348333358765, -0.23294837772846222, 2.1936395168304443, -0.1125798150897026, 0.48323166370391846, -2.097616672515869]
#         detection_plan = arm_utils.fK_calculate(group,detection_position)
#         arm_utils.execute_plan(group,detection_plan)
#         arm_utils.gripper_control("open")
#         # get object pose
#         object_id = 0 # 0: memory chip; 1: cpu
#         object_pose = arm_utils.object_pose(object_id)
#         return "succuss"

class MoveToChipHoverPosition(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        global robot,group
        if demonstration:
            hover_position = [0.726246178150177, 1.018491268157959, 1.3517783880233765, -0.10556681454181671, 0.7094179391860962, 4.743661880493164]
            hover_plan = fK_calculate(group,hover_position):
        else:
            hover_pose = deepcopy(object_pose)
            hover_pose.pose.translation.z += 0.05
            cur_pose = group.get_current_pose().pose
            hover_plan = arm_utils.IK_MoveIt(group,cur_pose,hover_pose)
        arm_utils.execute_plan(group,hover_plan)
        arm_utils.gripper_control("open")
        return "succuss"

class MoveToPickPosition(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        global robot,group
        pick_pose = deepcopy(object_pose)
        cur_pose = group.get_current_pose().pose
        pick_plan = arm_utils.IK_MoveIt(group,cur_pose,pick_pose)
        arm_utils.execute_plan(group,pick_plan)
        arm_utils.gripper_control("chip_close")
        return "succuss"
        
class MoveToChipHoverPosition_2(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        global robot,group
        hover_pose = deepcopy(object_pose)
        hover_pose.pose.translation.z += 0.05
        cur_pose = group.get_current_pose().pose
        hover_plan = arm_utils.IK_MoveIt(group,cur_pose,hover_pose)
        arm_utils.execute_plan(group,hover_plan)
        arm_utils.gripper_control("chip_close")
        return "succuss"


class MoveToPreInsertPosition(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        start = get_current_pose_list()
        end = preplace_pose
        joint = planner(start, end, limb=limb,planner_type=planner_type,point_mode=True)
        if running_mode == "point":
            moving_point_mode(point=joint,limb=limb,speed=speed,gripper_state="close")
        return "succuss"

class MoveToPlacePosition(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        start = get_current_pose_list()
        end = place_pose
        joint = planner(start, end, limb=limb,planner_type=planner_type,point_mode=True)
        if running_mode == "point":
            moving_point_mode(point=joint,limb=limb,speed=speed,gripper_state="open")
        return "succuss"

class BackToPrePlacePosition(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        start = get_current_pose_list()
        end = preplace_pose
        joint = planner(start, end, limb=limb,planner_type=planner_type,point_mode=True)
        if running_mode == "point":
            moving_point_mode(point=joint,limb=limb,speed=speed,gripper_state="open")
        return "succuss"

class MoveBackToReadyPose(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succuss'])

    def execute(self, userdata):
        ready_pose = [ 0.03681553890924993, -0.9836651802315216,0.2515728492132078, 1.1443496677625187, -0.1054611791671222, 1.3698448435816746, -0.5744758050630875]
        if running_mode == "point":
            moving_point_mode(point=ready_pose,limb=limb,speed=speed,gripper_state="open")
        return "succuss"

def main():
    global robot,group
    rospy.init_node("memory_chip_demo",anonymous=True)
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('memory_chip_demo',anonymous=True)
    robot = moveit_commander.RobotCommander()
    group = moveit_commander.MoveGroupCommander("tx90_arm")
    # set moveit param
    robot.set_planning_time(15)    
    robot.allow_replanning(True)
    group.set_max_velocity_scaling_factor(0.5)
    group.set_max_acceleration_scaling_factor(0.5)
    group.set_goal_joint_tolerance(0.001)
    group.set_goal_position_tolerance(0.001)
    group.set_goal_orientation_tolerance(0.001)

    sm = smach.StateMachine(outcomes=['Done'])
    with sm:
        smach.StateMachine.add(MoveToReadyPose.__name__, MoveToReadyPose(), 
                               transitions={'succuss':MoveToHoverPosition.__name__})     

        smach.StateMachine.add(MoveToHoverPosition.__name__, MoveToHoverPosition(), 
                               transitions={'succuss':MoveToPickPosition.__name__})    

        smach.StateMachine.add(MoveToPickPosition.__name__, MoveToPickPosition(), 
                               transitions={'succuss':BackToPrePickPosition.__name__}),      

        smach.StateMachine.add(BackToPrePickPosition.__name__, BackToPrePickPosition(), 
                               transitions={'succuss':MoveToPrePlacePosition.__name__})    
                                                                                   
        smach.StateMachine.add(MoveToPrePlacePosition.__name__, MoveToPrePlacePosition(), 
                               transitions={'succuss':MoveToPlacePosition.__name__})

        smach.StateMachine.add(MoveToPlacePosition.__name__, MoveToPlacePosition(), 
                               transitions={'succuss':BackToPrePlacePosition.__name__})

        smach.StateMachine.add(BackToPrePlacePosition.__name__, BackToPrePlacePosition(), 
                               transitions={'succuss':MoveBackToReadyPose.__name__})

        smach.StateMachine.add(MoveBackToReadyPose.__name__, MoveBackToReadyPose(), 
                               transitions={'succuss':'Done'})
                               

    outcome = sm.execute()


if __name__ == '__main__':
    sys.exit(main())